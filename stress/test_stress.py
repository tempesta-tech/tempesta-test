"""
HTTP Stress tests - load Tempesta FW with multiple connections.
"""
from helpers import tf_cfg
from framework import tester

__author__ = 'Tempesta Technologies, Inc.'
__copyright__ = 'Copyright (C) 2022 Tempesta Technologies, Inc.'
__license__ = 'GPL2'

# Backend content size in bytes
LARGE_CONTENT_LENGTH = 1024 * 64

# Keep 100+ open connections
CONCURRENT_CONNECTIONS = max(
    int(tf_cfg.cfg.get('General', 'concurrent_connections')),
    100
)


class BaseWrkStress(tester.TempestaTest, base=True):
    """Stress test generated by `wrk` with concurrent connections."""

    backends = [
        {
            'id': 'deproxy',
            'type': 'deproxy',
            'port': '8000',
            'response': 'static',
            'response_content': (
                'HTTP/1.1 200 OK\r\n'
                f"Content-Length: {LARGE_CONTENT_LENGTH}\r\n"
                '\r\n'
                f"{'@' * LARGE_CONTENT_LENGTH}"
            ),
        },
    ]

    def test_concurrent_connections(self):
        self.start_all_servers()
        self.deproxy_manager.start()
        self.start_tempesta()

        wrk = self.get_client('wrk')
        wrk.connections = CONCURRENT_CONNECTIONS
        wrk.set_script("foo", content='wrk.method="GET"')
        wrk.timeout = 0
        wrk.threads = 10
        wrk.duration = 120

        wrk.start()
        self.wait_while_busy(wrk)
        wrk.stop()

        self.assertGreater(wrk.statuses[200], 0)


class WrkStress(BaseWrkStress):
    """HTTP stress test generated by `wrk` with concurrent connections."""

    tempesta = {
        'config' : """
            listen 80 proto=http;
            server ${server_ip}:8000;
            cache 0;
        """
    }

    clients = [
        {
            'id' : 'wrk',
            'type' : 'wrk',
            'addr' : "${tempesta_ip}:80",
        },
    ]


class WrkTlsStress(BaseWrkStress):
    """HTTPS stress test generated by `wrk` with concurrent connections."""

    tempesta = {
        'config' : """
        listen 443 proto=https;
        tls_certificate ${general_workdir}/tempesta.crt;
        tls_certificate_key ${general_workdir}/tempesta.key;
        tls_match_any_server_name;
        server ${server_ip}:8000;
        cache 0;
        """
    }

    clients = [
        {
            'id' : 'wrk',
            'type' : 'wrk',
            'ssl': True,
            'addr' : "${tempesta_ip}:443",
        },
    ]


class BaseCurlStress(tester.TempestaTest, base=True):
    """Base class for HTTPS ans HTTP/2 stress tests with `curl`."""

    backends = [
        {
            'id': 'deproxy',
            'type': 'deproxy',
            'port': '8000',
            'response': 'static',
            'response_content': (
                'HTTP/1.1 200 OK\r\n'
                'Server: test\r\n'
                'Date: test\r\n'
                f"Content-Length: {LARGE_CONTENT_LENGTH}\r\n"
                '\r\n'
                f"{'@' * LARGE_CONTENT_LENGTH}"
            ),
        },
    ]

    tempesta_tmpl = """
        listen 443 proto=%s;
        server ${server_ip}:8000;
        tls_certificate ${general_workdir}/tempesta.crt;
        tls_certificate_key ${general_workdir}/tempesta.key;
        tls_match_any_server_name;
        cache 0;
    """

    clients = [
        {
            # Curl client to request URLs (/1 /2 ..) in parallel
            'id': 'concurrent',
            'type': 'curl',
            'disable_output': True,
            'ssl': True,
            'uri': f"/[1-{CONCURRENT_CONNECTIONS * 10}]",
            'cmd_args': (
                ' --insecure'
                ' --max-time 5'
                ' --parallel-immediate'
                ' --parallel'
                f" --parallel-max {CONCURRENT_CONNECTIONS}"
            ),
        }
    ]

    def setUp(self):
        self.tempesta = {
            'config': self.tempesta_tmpl % (self.proto),
        }
        super().setUp()

    def start_all(self):
        self.start_all_servers()
        self.deproxy_manager.start()
        self.start_tempesta()

    def test_concurrent_connections(self):
        self.start_all()
        client = self.get_client('concurrent')
        client.start()
        self.wait_while_busy(client)
        client.stop()


class TlsCurlStress(BaseCurlStress):
    """HTTPS stress test generated by `curl`."""
    proto = "https"


class H2CurlStress(BaseCurlStress):
    """HTTP/2 stress test generated by `curl`."""
    proto = "h2"

    def setUp(self):
        self.clients[0]['http2'] = True
        super().setUp()


# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
